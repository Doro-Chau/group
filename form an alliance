# !/usr/bin/python 
# coding:utf-8 
from vpython import*
import numpy as np
import random
from tkinter import*
from scipy.stats import rankdata

N = 38  # 一個邊的格子點數目
h = 0.88  # 每個格子的寬
e = 7*10E-3
phi = np.full(N**2, 1/N**2)  # phi是一個depend on (x,y,t)的函數，會映射到排名，依據排名絕對各點密度
phi = np.reshape(phi, (N, N))
scene = canvas(title = 'Spatial and Pricing Competition', height = 800, width = 1100, center = vec(0, 0, 0), background = vec(0, 0, 0))
scene.lights = []  # 背景

def rank(matrix):  # 計算排名
	r = rankdata(matrix, method = 'min').reshape(matrix.shape)
	ranks = (r.max() + 1) - r
	return ranks


def cooperation(info,period):
    if period < 4 or period > 7:  # no cooperation
        return 1,1
    (co1,co2,betray1,betray2) = info
    chg1 = 1;
    chg2 = 1;
    if co1:  # 工廠一已經結盟
        if not betray1:  # 還沒背叛
            #  螢幕顯示：工廠一選擇背叛與否：是？否？
            betray1 = result  # 螢幕上的選擇
        if betray1:
            chg1 = 0.8
        else:
            chg1 = 1.5
    if not co1:
        #  螢幕顯示：工廠一結盟與否？是？否？      
        co1 = result  # 螢幕上的選擇
        if co1:
            chg1 = 1.5
    if co2:  # 工廠二已經結盟
        if not betray2:  # 還沒背叛
            #  螢幕顯示：工廠二選擇背叛與否：是？否？
            betray2 = result  # 螢幕上的選擇
        if betray2:
            chg2 = 0.8
        else:
            chg2 = 1.5
    if not co2:
        #  螢幕顯示：工廠二結盟與否？是？否？      
        co2 = result  # 螢幕上的選擇
        if co2:
            chg2 = 1.5

    return (co1,co2,betray1,betray2),(chg1,chg2)
    
    #  螢幕顯示：工廠二結盟與否？是？否？

points = []  # 在螢幕上畫出格子點，為N*N的list
for i in range(N):
	TempList = []
	for j in range(N):
		point = box(pos = vec(-18+i*(h+e), -3+j*(h+e), 0), length = h, height= h, width = h/4, color = vec(1, 1, 1), emissive = True)
		TempList.append(point)
		if j == N - 1:
			points.append(TempList)

scene.center = points[19][19].pos

# 廠商1的資產負債表圖
BS_1 = graph(width = 600, align = 'left', title = 'Firm 1 Balance Sheet', xtitle = 'time', ytitle = '$', background = vec(0.6, 0.6, 0.6))
A_graph1 = gcurve(color = color.blue, graph = BS_1)  # 資產:藍色線
L_graph1 = gcurve(color = color.red, graph = BS_1)  # 負債:紅色線
E_graph1 = gcurve(color = color.green, graph = BS_1)  # 權益:綠色線
# 廠商2的資產負債表圖
BS_2 = graph(width = 600, align = 'left', title = 'Firm 2 Balance Sheet', xtitle = 'time', ytitle = '$', background = vec(0.6, 0.6, 0.6))
A_graph2 = gcurve(color = color.blue, graph = BS_2)  # 資產:藍色線
L_graph2 = gcurve(color = color.red, graph = BS_2)  # 負債:紅色線
E_graph2 = gcurve(color = color.green, graph = BS_2)  # 權益:綠色線

# the parameters
v1, v2 = 32, 32  # 消費者認為商品的價值，可能對不同廠商有不同的願付價值
trans_c = 2.50  # 消費者的單位交通成本
p1 ,p2 = 0, 0  # 兩家廠商的定價
pf1, pf2 = 0, 0  # 兩家廠商的利潤
marg_c1, marg_c2 = 3.00, 3.00  # 兩家廠商的單位生產成本

A1, A2 = 0, 0  # Asset
L1, L2 = 0, 0  # Liability
E1, E2 = 0, 0  # Equity


firm1s, firm2s = [], []  # 存放廠商位置的list

rho = np.zeros((N,N))  # 密度
period = 0  # 時間的計數器
T = 8  # 總期數
loc1, loc2 = [], []  # 紀錄玩家一、玩家二的設廠位置在哪一個格子(i,j)
info = (False,False,False,False)

while period < T:
	print('Period ' + str(period) + ' begins.')

	# 每三期，邊際成本重置至3.00
	if period%3 == 0:
		marg_c1, marg_c2 = 3.00, 3.00

	# 人口密度改變外生衝擊，有8%的機率密度反轉
	DensityShcok = random.random()
	for i in range(N):
		for j in range(N):
			phi[i][j] = exp(0.01*(i+1)*period)*(j+1)  # phi(x,y,t)的值，可以變動，也可以設計contract
			
	if DensityShcok < 0.08:
		for i in range(N):
			for j in range(N):
				phi[i][j] = -phi[i][j]

	# 邊際成本變動外生衝擊(t = 0不出現此衝擊)，本期有20%機會成本+1，10%機率成本+3，10%機率成本+5
	if period > 0:
		CostShock = random.random()  # 廠商1
		if CostShock < 0.40 and CostShock > 0.20:
			marg_c1 += 1
		elif CostShock <= 0.20 and CostShock > 0.10:
			marg_c1 += 3
		elif CostShock <= 0.10:
			marg_c1 += 5

		CostShock = random.random()  # 廠商2
		if CostShock < 0.40 and CostShock > 0.20:
			marg_c2 += 1
		elif CostShock <= 0.20 and CostShock > 0.10:
			marg_c2 += 3
		elif CostShock <= 0.10:
			marg_c2 += 5

	print('Firm 1 marginal cost  $' + str(marg_c1))
	print('Firm 2 marginal cost  $' + str(marg_c2))

			
	R = rank(phi)  # phi mapping到rank
	rho = R // (N**2//100)  # 根據rank決定密度

	for i in range(N):
		for j in range(N):
			a = rho[i][j]
			points[i][j].color = vec(a/100, 0, 1-(a/100))  # 密度越大，越偏向紅色。越小則偏藍色。

	# positioning
	check_ball = False
	while check_ball == False:
		ev = scene.pause('Click to proceed')  # 廠商1決定位置

		for i in range(N):
			for j in range(N):

				if ev.pos.x <= points[i][j].pos.x+(h/2) and ev.pos.x >= points[i][j].pos.x-(h/2):
					if ev.pos.y <= points[i][j].pos.y+(h/2) and ev.pos.y >= points[i][j].pos.y-(h/2):

						firm1 = sphere(pos = points[i][j].pos, radius = h/2, color = color.cyan, emissive = 'True')  # 放棋子
						loc = []
						loc.append(i)
						loc.append(j)
						loc1.append(loc)
						firm1s.append(firm1)
						check_ball = True
						break

	firm1s[period].visible = False  # 如果positioning session是同時賽局，則玩家一決定後，棋子會短暫不可見。

	check_ball = False
	while check_ball == False:
		ev = scene.pause('Click to proceed')  # 廠商2決定位置

		for i in range(N):
			for j in range(N):

				if ev.pos.x <= points[i][j].pos.x+(h/2) and ev.pos.x >= points[i][j].pos.x-(h/2):
					if ev.pos.y <= points[i][j].pos.y+(h/2) and ev.pos.y >= points[i][j].pos.y-(h/2):

						firm2 = sphere(pos = points[i][j].pos, radius = h/2, color = color.yellow , emissive = 'True')
						loc = []
						loc.append(i)
						loc.append(j)
						loc2.append(loc)
						firm2s.append(firm2)
						check_ball = True
						break

	firm1s[period].visible = True  # 一旦廠商2決定完位置，positioning session結束，公布兩人的決策

	# 接下來會跳出一個小視窗，進入pricing session，輸入價格(每三期，period = 0, 3, 6才能改價格，price rigidity)
	if period%3 == 0:
		root = Tk()

		def retrieve_1():
			global p1
			InValue = textBox.get('1.0', 'end-1c')
			p1 = float(InValue)

		textBox = Text(root, height = 2, width = 10)
		textBox.pack()
		confirm = Button(root, height = 1, width = 10, text = 'confirm', command = lambda: retrieve_1())  # 決定好價格，按confirm
		confirm.pack()
		Button(root, text = 'Quit', command = root.destroy).pack()  # 然後按Quit，換人定價
		mainloop()

	# 廠商2定價
		root = Tk()

		def retrieve_2():
			global p2
			InValue = textBox.get('1.0', 'end-1c')
			p2 = float(InValue)

		textBox = Text(root, height = 2, width = 10)
		textBox.pack()
		confirm = Button(root, height = 1, width = 10, text = 'confirm', command = lambda: retrieve_2())
		confirm.pack()
		Button(root, text = 'Quit', command = root.destroy).pack()
		mainloop()
    
	(info,(priceChange1,priceChange2)) = cooperation(info,period)
	p1 = priceChange1 * p1
	p2 = priceChange2 * p2
	# 檢查每個格子點上的消費者到底會買廠商1、廠商2、還是都不買
	for i in range(N):
		for j in range(N):

			CS1, CS2 = -1, -1
			for num in range(len(loc1)):
				dist1 = mag(vec(i, j, 0)-vec(loc1[num][0], loc1[num][1], 0))  # 廠商1跟該格子消費者的距離
				CS1 = max(v1-p1-trans_c*dist1, CS1)  # 消費者買廠商1的消費者剩餘
			for num in range(len(loc2)):
				dist2 = mag(vec(i, j, 0)-vec(loc2[num][0], loc2[num][1], 0))  # 廠商1跟該格子消費者的距離
				CS2 = max(v2-p2-trans_c*dist2, CS2)  # 消費者買廠商1的消費者剩餘

			if CS1 > CS2 and CS1 >= 0:
				pf1 += rho[i][j]*(p1-marg_c1)
			if CS1 < CS2 and CS2 >= 0:
				pf2 += rho[i][j]*(p2-marg_c2) 
			if CS1 == CS2 and CS1 >= 0:
				r = random.random()
				if r < 0.50:
					pf1 = rho[i][j]*(p1-marg_c1)
				else:
					pf2 = rho[i][j]*(p2-marg_c2)

	A2 += pf2
	E2 += pf2
	A1 += pf1
	E1 += pf1						

	print('Period ' + str(period) + ' ends.')  # 一期就這樣結束了~

	A_graph1.plot(pos = (period, A1))
	L_graph1.plot(pos = (period, L1))
	E_graph1.plot(pos = (period, E1))	


	A_graph2.plot(pos = (period, A2))
	L_graph2.plot(pos = (period, L2))
	E_graph2.plot(pos = (period, E2))
	
	print('Firm 1 Profit:  $ ', pf1)
	print('Firm 2 Profit:  $ ', pf2)
	pf1, pf2 = 0, 0

	period += 1
